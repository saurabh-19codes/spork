import React from 'react';
import { fromJS } from 'immutable';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import { useFetchye } from 'fetchye';
import { useSelector } from 'react-redux';
import ProgramForm from '../../../src/components/OnBoardProgram/ProgramForm';

jest.mock('fetchye', () => ({
  useFetchye: jest.fn(),
}));

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
}));

const mockAppState = fromJS({
  config: {
    oneApiUrl: 'http://localhost',
  },
});

const mockRun = jest.fn();

beforeEach(() => {
  jest.clearAllMocks();
  useSelector.mockImplementation((cb) => cb(mockAppState));
  useFetchye.mockImplementation(() => ({
    isLoading: false,
    data: null,
    error: null,
    run: mockRun,
  }));
});

describe('ProgramForm', () => {
  it('should submit successfully and show success alert', async () => {
    mockRun.mockResolvedValueOnce({ success: true });
    render(<ProgramForm orgName="Test Org" />);

    fireEvent.change(screen.getByTestId('handleproduct'), {
      target: { value: 'Test Product' },
    });
    fireEvent.change(screen.getByTestId('handleextraction'), {
      target: { value: 'epics' },
    });

    fireEvent.submit(screen.getByTestId('onsubmit'));

    await waitFor(() => {
      expect(mockRun).toHaveBeenCalled();
      expect(screen.getByText(/Added successfully/i)).toBeInTheDocument();
    });

    // Close alert
    fireEvent.click(screen.getByTestId('showAlert'));
    expect(screen.queryByText(/Added successfully/i)).not.toBeInTheDocument();
  });

  it('should show error alert on failed submit', async () => {
    mockRun.mockResolvedValueOnce({ success: false });
    render(<ProgramForm orgName="Test Org" />);

    fireEvent.submit(screen.getByTestId('onsubmit'));

    await waitFor(() => {
      expect(screen.getByText(/Some problem happened/i)).toBeInTheDocument();
    });
  });

  it('should change all dropdowns and inputs', () => {
    render(<ProgramForm orgName="Test Org" />);

    fireEvent.change(screen.getByTestId('handleorg'), {
      target: { value: 'New Org' },
    });
    fireEvent.change(screen.getByTestId('handleproduct'), {
      target: { value: 'New Product' },
    });
    fireEvent.change(screen.getByTestId('handleextraction'), {
      target: { value: 'Containers' },
    });
    fireEvent.change(screen.getByTestId('handleepic'), {
      target: { value: 'Epic 1' },
    });
    fireEvent.change(screen.getByTestId('handlecapability'), {
      target: { value: 'Cap 1' },
    });
    fireEvent.change(screen.getByTestId('handleplatform'), {
      target: { value: 'Platform 1' },
    });
    fireEvent.change(screen.getByTestId('handlecontainer'), {
      target: { value: 'Container 1' },
    });
  });

  it('should disable dropdowns when typeOfExtraction is Containers', () => {
    render(<ProgramForm orgName="Test Org" />);

    fireEvent.change(screen.getByTestId('handleextraction'), {
      target: { value: 'Containers' },
    });

    expect(screen.getByTestId('handleepic')).toBeDisabled();
    expect(screen.getByTestId('handlecapability')).toBeDisabled();
    expect(screen.getByTestId('handleplatform')).toBeDisabled();
  });

  it('should disable submit button when form is pristine', () => {
    render(<ProgramForm orgName="Test Org" />);
    const btn = screen.getByTestId('onsubmit');
    expect(btn).toBeDisabled();
  });
});
