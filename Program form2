import React from 'react';
import { mount } from 'enzyme';
import { fromJS } from 'immutable';
import { useFetchye } from 'fetchye';
import { useSelector } from 'react-redux';
import { render, waitFor, fireEvent, screen } from '@testing-library/react';
import ProgramForm from '../../../src/components/OnBoardProgram/ProgramForm';

jest.mock('fetchye', () => ({
  useFetchye: jest.fn(),
}));

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
}));

const mockAppState = fromJS({
  config: {
    oneApiUrl: 'http://localhost',
  },
});

const mockRun = jest.fn();

beforeEach(() => {
  jest.clearAllMocks();
  useSelector.mockImplementation((cb) => cb(mockAppState));
  useFetchye.mockImplementation(() => ({
    isLoading: false,
    data: null,
    error: null,
    run: mockRun,
  }));
});

describe('View UI', () => {
  it('should render the view page', async () => {
    useFetchye.mockImplementationOnce(() => ({
      isLoading: false,
      data: { success: true },
      run: async () => ({ success: true }),
    }));
    const component = mount(<ProgramForm />);
    expect(component).toMatchSnapshot();
  });

  it('should render the view page with null', async () => {
    useFetchye.mockImplementationOnce(() => ({
      isLoading: false,
      data: { success: true },
      run: async () => ({ success: true }),
    }));
    const { getByTestId } = render(<ProgramForm />);
    const saveNode = await waitFor(() => getByTestId('onsubmit'));
    fireEvent.submit(saveNode);
    const listNode = await waitFor(() => getByTestId('handleorg'));
    fireEvent.change(listNode, { target: { value: 'OrgTest' } });
    const listNode2 = await waitFor(() => getByTestId('handleproduct'));
    fireEvent.change(listNode2, { target: { value: 'ProductTest' } });
    expect(getByTestId('handleproduct')).toBeInTheDocument();
  });

  // âœ… Extra tests for full coverage

  it('should submit successfully and show success alert', async () => {
    mockRun.mockResolvedValueOnce({ success: true });
    render(<ProgramForm orgName="Test Org" />);
    fireEvent.change(screen.getByTestId('handleproduct'), {
      target: { value: 'Test Product' },
    });
    fireEvent.submit(screen.getByTestId('onsubmit'));
    await waitFor(() => {
      expect(mockRun).toHaveBeenCalled();
      expect(screen.getByText(/Added successfully/i)).toBeInTheDocument();
    });
    fireEvent.click(screen.getByTestId('showAlert'));
    expect(screen.queryByText(/Added successfully/i)).not.toBeInTheDocument();
  });

  it('should show error alert on failed submit', async () => {
    mockRun.mockResolvedValueOnce({ success: false });
    render(<ProgramForm orgName="Test Org" />);
    fireEvent.submit(screen.getByTestId('onsubmit'));
    await waitFor(() => {
      expect(screen.getByText(/Some problem happened/i)).toBeInTheDocument();
    });
  });

  it('should change all dropdowns and inputs', () => {
    render(<ProgramForm orgName="Test Org" />);
    fireEvent.change(screen.getByTestId('handleorg'), {
      target: { value: 'New Org' },
    });
    fireEvent.change(screen.getByTestId('handleproduct'), {
      target: { value: 'New Product' },
    });
    fireEvent.change(screen.getByTestId('handleextraction'), {
      target: { value: 'epics' },
    });
    fireEvent.change(screen.getByTestId('handleepic'), {
      target: { value: 'Epic 1' },
    });
    fireEvent.change(screen.getByTestId('handlecapability'), {
      target: { value: 'Cap 1' },
    });
    fireEvent.change(screen.getByTestId('handleplatform'), {
      target: { value: 'Platform 1' },
    });
    fireEvent.change(screen.getByTestId('handlecontainer'), {
      target: { value: 'Container 1' },
    });
  });

  it('should disable dropdowns when typeOfExtraction is Containers', () => {
    render(<ProgramForm orgName="Test Org" />);
    fireEvent.change(screen.getByTestId('handleextraction'), {
      target: { value: 'Containers' },
    });
    expect(screen.getByTestId('handleepic')).toBeDisabled();
    expect(screen.getByTestId('handlecapability')).toBeDisabled();
    expect(screen.getByTestId('handleplatform')).toBeDisabled();
  });

  it('should disable submit button when form is pristine', () => {
    render(<ProgramForm orgName="Test Org" />);
    expect(screen.getByTestId('onsubmit')).toBeDisabled();
  });
});
